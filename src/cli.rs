//! CLI argument parsing for configuring what to do

use crate::AppSettings;
use std::fmt::Display;
use std::process::exit;
use std::str::FromStr;

use crate::Float;

/// How should we give information about the model back to the user?
pub enum DisplayMethod<'a> {
    /// Output data about the model in a CSV format, printing directly to Stdout
    Csv { file: Option<&'a str> },
    /// Produce a series of PNG files, each named 'branch-tree-*.png' in the current directory.
    Png { file_pattern: &'a str },
}

/// Which model of the lungs should we use?
pub enum Model {
    /// `EqualChildGenerator` with the given depth
    Symmetric { depth: usize },
}

/// Main entrypoint for the program
///
/// Handles command-line argument parsing & others, then dispatches based on what's been enabled.
pub fn run() {
    let matches = args_parser().get_matches();

    let total_time = matches
        .value_of("total-time")
        .unwrap()
        .parse::<Float>()
        .expect("validator should ensure that this is a valid float");

    let timestep = matches
        .value_of("timestep")
        .unwrap()
        .parse::<Float>()
        .expect("validator should ensure that this is a valid float");

    let display_method = match matches.value_of("output").unwrap() {
        "csv" | "CSV" => DisplayMethod::Csv {
            file: matches.value_of("file-pattern"),
        },
        "png" | "PNG" => {
            // 'file-pattern' is required for 'png' in the clap app
            let pat = matches.value_of("file-pattern").unwrap();

            if pat.matches("{}").count() != 1 {
                eprintln!(
                    "PNG file pattern must contain exactly one occurence of '{{}}' to substitute"
                );
                exit(1);
            } else {
                DisplayMethod::Png { file_pattern: pat }
            }
        }
        _ => unreachable!(),
    };

    let model = match matches.value_of("lung-model").unwrap() {
        "symmetric" => {
            let depth = matches
                .value_of("depth")
                .unwrap()
                .parse::<usize>()
                .expect("validator should ensure this is a valid usize");

            Model::Symmetric { depth }
        }
        _ => unreachable!(),
    };

    AppSettings {
        total_time,
        timestep,
        display_method,
        model,
    }
    .run()
}

/// Returns the String generated by substituting the image number into a PNG file pattern
///
/// Panics if the pattern is invalid. Any pattern given to an `AppSettings` by this module will be
/// valid.
///
/// The image number also does not *necessarily* have to be less than `num_imgs` -- that's actually
/// the case when we're given total_time = 0, to repeat forever.
pub fn substitute_png_file_pattern(pat: &str, img_number: u64, mut num_imgs: u64) -> String {
    let mut digits_space = 0;
    while num_imgs > 0 {
        num_imgs /= 10;
        digits_space += 1;
    }

    let (fst_half, snd_half) = pat.split_once("{}").expect("pattern should contain '{}'");
    format!(
        "{}{:0digits$}{}",
        //  ^^^^^^^^^ pad with leading zeroes so there's at least 'digits' digits
        fst_half,
        img_number,
        snd_half,
        digits = digits_space
    )
}

fn args_parser() -> clap::App<'static, 'static> {
    use clap::{App, Arg};

    // Generic validator, to check that we can parse the value as a certain type.
    fn valid_as<T>(check: fn(T) -> bool, msg: &'static str) -> impl Fn(String) -> Result<(), String>
    where
        T: FromStr,
        T::Err: Display,
    {
        move |s| {
            s.parse::<T>()
                .map_err(|e| e.to_string())
                .and_then(|v| match check(v) {
                    false => Err(msg.to_owned()),
                    true => Ok(()),
                })
        }
    }

    App::new("Super-fancy Airflow Simulator")
        .version("0.1.0")
        .author("Max Sharnoff <github@max.sharnoff.org>")
        .about("Tool for simulating airflow in the lungs")
        ////////////////////////////////////////////////////////////
        // SECTION: Simulation meta-variables                     //
        ////////////////////////////////////////////////////////////
        .arg(
            Arg::with_name("total-time")
                .short("t")
                .long("time")
                .value_name("TIME")
                .help("Set how long to run for, in seconds. Use 0 to run until stopped")
                .takes_value(true)
                .required(true)
                .validator(valid_as::<Float>(|f| f >= 0.0, "total time must be >= 0")),
        )
        .arg(
            Arg::with_name("timestep")
                .long("timestep")
                .value_name("TIMESTEP")
                .help("Set the timestep to advance the simulation by each time, in seconds")
                .long_help(concat!(
                    "Set the timestep to advance the simulation by each time, in seconds.\n",
                    "Defaults to 0.01. Also determines the frequency of PNG output images.",
                ))
                .default_value("0.01")
                .takes_value(true)
                .required(true)
                .validator(valid_as::<Float>(|f| f > 0.0, "timestep must be > 0")),
        )
        ////////////////////////////////////////////////////////////
        // SECTION: Output methods                                //
        ////////////////////////////////////////////////////////////
        .arg(
            Arg::with_name("output")
                .short("o")
                .long("output")
                .possible_values(&["csv", "CSV", "png", "PNG"])
                .required_ifs(&[
                    // 'file-pattern' is required for emitting PNGs
                    ("png", "file-pattern"),
                    ("PNG", "file-pattern"),
                ])
                .required(true)
                .takes_value(true)
                .help("Set the output format to use: 'csv' or 'png'")
                .long_help(concat!(
                    "Set the output format to use: 'csv' or 'png'. The CSV output\n",
                    "is an overview of the airflow & total volume at each timestep.\n",
                    "PNG output provides an image at each timestep, and requires the\n",
                    "'-f'/'--file-pattern' option.\n\n",
                    "CSV output defaults to Stdout if no file is provided",
                )),
        )
        .arg(
            Arg::with_name("file-pattern")
                .short("f")
                .long("file-pattern")
                .value_name("FILE-PATTERN")
                .help("Set the file pattern to use when outputting PNGs or a single CSV")
                .long_help(concat!(
                    "Set the file pattern to use when outputting PNGs or a single CSV.\n",
                    "When making PNGs, the pattern should have a literal '{}' somewhere\n",
                    "which will be replaced with an incrementing number for the image.",
                )),
        )
        ////////////////////////////////////////////////////////////
        // SECTION: Model selection & customization               //
        ////////////////////////////////////////////////////////////
        .arg(
            Arg::with_name("lung-model")
                .short("m")
                .long("model")
                .possible_values(&["symmetric"])
                .required_ifs(&[("symmetric", "depth")])
                .required(true)
                .takes_value(true)
                .help("Set the model of the lungs to use: 'symmetric' is the only option")
                .long_help(concat!(
                    "Set the model of the lungs to use: 'symmetric' is currently the only\n",
                    "option.\n\n",
                    "'symmetric' requires the '--depth' parameter to be given, which determines\n",
                    "what the terminal child depth should be.",
                )),
        )
        .arg(
            Arg::with_name("depth")
                .long("depth")
                .value_name("DEPTH")
                .help("Set the terminal child depth of the symmetric model")
                .takes_value(true)
                .required(true)
                .validator(valid_as::<usize>(|d| d > 0, "depth must be > 0")),
        )
}
